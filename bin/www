#!/usr/bin/env node

// Module dependencies.
var app = require('../server');
var http = require('http');
const mongoose = require('mongoose');
const fs = require('fs');
const logger = require("../utils/logger");
const { info } = require('console');
const { response } = require('../server');

logger.info("Initialising server")

// Get port from environment and store in Express.
var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

// Create HTTP server.
var server = http.createServer(app);

// connect to mongoDB - will catch authentication error and display relavant HTML File
const dbURI = `mongodb+srv://${process.env.MONGODB_USERNAME}:${process.env.MONGODB_PASSWORD}@deedlocker.flr9csz.mongodb.net/?`;
mongoose.connect(dbURI)
  .then(function (result) {
    logger.info("Successfully connected to DB")
    server.listen(port)
  })
  .catch((err) => onError(err))
  .catch((err) => process.disconnect())

// Listen on provided port, on all network interfaces.
server.on('error', onError);
server.on('listening', onListening);
//server.on('request', function (req, res){
//  res.end(404)
//})


function onTest() {
  console.log("I am Dev");
}

// Normalize a port into a number, string, or false.
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }
  return false;
}


// Event listener for HTTP server "error" event.
function onError(error) {
  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    case 8000:  //catch MONGODB Authentication fail and create a server serving a html file
      logger.error(error)
      logger.error("Unable to connect to DB");
      fs.readFile('./public/serverErrors/dbConnectionError.html', function (err, html) {
        if (err) throw err;
        http.createServer(function(req, res){
          res.writeHeader(200, {"Content-Type": "text/html"});  
          res.write(html);  
          res.end();  
        }).listen(port);
      })
    default:
      throw error;
  }
}

// Event listener for HTTP server "listening" event.
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  logger.info('Listening on ' + bind);
}
